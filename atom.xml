<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dogcraft</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.dogcraft.com/"/>
  <updated>2019-07-31T13:15:45.781Z</updated>
  <id>http://blog.dogcraft.com/</id>
  
  <author>
    <name>dogcraft</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于路径积分-蒙特卡洛方法的简单一维场</title>
    <link href="http://blog.dogcraft.com/2019-07-26/qed1/"/>
    <id>http://blog.dogcraft.com/2019-07-26/qed1/</id>
    <published>2019-07-26T07:38:16.000Z</published>
    <updated>2019-07-31T13:15:45.781Z</updated>
    
    <content type="html"><![CDATA[<!-- 基于路径积分-蒙特卡洛方法的简单一维场 --><h2 id="相关理论"><a href="#相关理论" class="headerlink" title="相关理论"></a>相关理论</h2><p>一维场即一维空间加上一维时间</p><p>基于拉氏量的路径积分</p><p>一维标量场给等效成空间内分立格点的（在空间维与时间维具有双重周期条件的）类似与固体物理的布洛赫定理的场。</p><p>核心方法：量子力学之中的变分法。稳定的经典场系统的作用量总是取最小值，量子力学之中不确定原理导致非最小作用量的状态仍然有机会出现。量子系统的具体状态由概率确定，由作用量小的状态向作用量大的状态变化（非时间演化）的概率由作用量的差值的负指数确定。</p><p>格点方法下的场的拉格朗日量。具体方法见ppt截图。</p><p><img src="001.png" alt="tu1"></p><p><img src="002.png" alt="tu2"></p><h2 id="编程与计算"><a href="#编程与计算" class="headerlink" title="编程与计算"></a>编程与计算</h2><p>python与C++混合编程。C++编译计算模块加速运算性能，利用python的众多的数据处理与分析工具进行可视化输出与处理。</p><p>相关的C++程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">double</span> *dog, <span class="keyword">int</span> Ndex, <span class="keyword">int</span> Tdex, <span class="keyword">int</span> Xdex, <span class="keyword">int</span> Nmax, <span class="keyword">int</span> Tmax, <span class="keyword">int</span> Xmax, <span class="keyword">double</span> msq, <span class="keyword">double</span> lam, <span class="keyword">double</span> dx)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ps</span><span class="params">(<span class="keyword">double</span> *dog, <span class="keyword">int</span> X, <span class="keyword">int</span> T, <span class="keyword">int</span> N, <span class="keyword">int</span> Xmax, <span class="keyword">int</span> Tmax, <span class="keyword">double</span> lam, <span class="keyword">double</span> msq, <span class="keyword">int</span> Nindex, <span class="keyword">int</span> Xindex, <span class="keyword">int</span> Tindex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Xb = X - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> Xf = X + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> Tb = T - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> Tf = T + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (Xb &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Xb = Xmax - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Tf &gt;= Tmax)</span><br><span class="line">    &#123;</span><br><span class="line">        Tf = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Tb &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Tb = Tmax - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Tf &gt;= Tmax)</span><br><span class="line">    &#123;</span><br><span class="line">        Xf = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(dog[N * Nindex + T * Tindex + X * Xindex] - dog[N * Nindex + Tf * Tindex + X * Xindex], <span class="number">2</span>) + <span class="built_in">pow</span>(dog[N * Nindex + T * Tindex + X * Xindex] - dog[N * Nindex + Tb * Tindex + X * Xindex], <span class="number">2</span>) + <span class="built_in">pow</span>(dog[N * Nindex + T * Tindex + X * Xindex] - dog[N * Nindex + T * Tindex + Xf * Xindex], <span class="number">2</span>) + <span class="built_in">pow</span>(dog[N * Nindex + T * Tindex + X * Xindex] - dog[N * Nindex + T * Tindex + Xb * Xindex], <span class="number">2</span>) + msq * <span class="built_in">pow</span>(dog[N * Nindex + T * Tindex + X * Xindex], <span class="number">2</span>) + lam * msq * <span class="built_in">pow</span>(dog[N * Nindex + T * Tindex + X * Xindex], <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">double</span> *dog, <span class="keyword">int</span> Ndex, <span class="keyword">int</span> Tdex, <span class="keyword">int</span> Xdex, <span class="keyword">int</span> Nmax, <span class="keyword">int</span> Tmax, <span class="keyword">int</span> Xmax, <span class="keyword">double</span> msq, <span class="keyword">double</span> lam, <span class="keyword">double</span> dx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> acp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> xx;</span><br><span class="line">    <span class="keyword">int</span> tt;</span><br><span class="line">    <span class="built_in">std</span>::default_random_engine seed;</span><br><span class="line">    seed.seed(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="comment">// seed.seed(1234);</span></span><br><span class="line">    <span class="comment">// std::uniform_real_distribution&lt;double&gt; ran1(-0.1,0.1);</span></span><br><span class="line">    <span class="built_in">std</span>::uniform_real_distribution&lt;<span class="keyword">double</span>&gt; ran2(<span class="number">-1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    <span class="built_in">std</span>::uniform_real_distribution&lt;<span class="keyword">double</span>&gt; ran3(<span class="number">0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; T_iter;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; X_iter;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Tmax; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        T_iter.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Xmax; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        X_iter.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> in = <span class="number">1</span>; in &lt; (Nmax - <span class="number">1</span>); in++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ix = <span class="number">0</span>; ix &lt; Xmax; ix++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> it = <span class="number">0</span>; it &lt; Tmax; it++)</span><br><span class="line">            &#123;</span><br><span class="line">                dog[(in + <span class="number">1</span>) * Ndex + ix * Xdex + it * Tdex] = dog[(in)*Ndex + ix * Xdex + it * Tdex];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::random_shuffle(X_iter.begin(), X_iter.end());</span><br><span class="line">        <span class="built_in">std</span>::random_shuffle(T_iter.begin(), T_iter.end());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ix = <span class="number">0</span>; ix &lt; Xmax; ix++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> it = <span class="number">0</span>; it &lt; Tmax; it++)</span><br><span class="line">            &#123;</span><br><span class="line">                xx = X_iter[ix];</span><br><span class="line">                tt = T_iter[it];</span><br><span class="line"></span><br><span class="line">                dog[(in + <span class="number">1</span>) * Ndex + xx * Xdex + tt * Tdex] = dog[(in + <span class="number">1</span>) * Ndex + xx * Xdex + tt * Tdex] + dx * ran2(seed);</span><br><span class="line">                <span class="keyword">double</span> ds = ps(dog, xx, tt, (in + <span class="number">1</span>), Xmax, Tmax, lam, msq, Ndex, Xdex, Tdex) - ps(dog, xx, tt, (in), Xmax, Tmax, lam, msq, Ndex, Xdex, Tdex);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">double</span> pan = ran3(seed);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (pan &lt; <span class="built_in">exp</span>(-ds))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">/* code */</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    dog[(in + <span class="number">1</span>) * Ndex + xx * Xdex + tt * Tdex] = dog[(in)*Ndex + xx * Xdex + tt * Tdex];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">g++ -shared -fPIC d.cpp -o d.so</span><br></pre></td></tr></table></figure><p>python部分:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#plt.rcParams['font.sans-serif']=['FangSong_GB2312'] #用来正常显示中文标签</span></span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> _rebuild</span><br><span class="line">_rebuild()<span class="comment">#重新创建字体索引列表</span></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">matplotlib.rcParams[<span class="string">'font.family'</span>]=[<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>]=<span class="literal">False</span> <span class="comment">#用来正常显示负号</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy.ctypeslib <span class="keyword">as</span> npct</span><br></pre></td></tr></table></figure><p>面向对象的编程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zutai</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,a=<span class="number">0.1</span>,N=<span class="number">6000</span>,la=<span class="number">0</span>,m=<span class="number">1</span>,ls=<span class="number">1</span>)</span>:</span></span><br><span class="line">        self.mass=m</span><br><span class="line">        self.a=a</span><br><span class="line">        self.N=N</span><br><span class="line">        self.nx=int(<span class="number">5</span>/a)</span><br><span class="line">        self.nt=int(<span class="number">10</span>/a)</span><br><span class="line">        self.msq=math.pow(m*a,<span class="number">2</span>)</span><br><span class="line">        self.lam=la*a*a</span><br><span class="line">        self.ls=ls</span><br><span class="line">        self.dog=np.zeros([self.N,self.nt,self.nx],dtype=<span class="string">'float64'</span>)</span><br><span class="line">        self.Ndex=self.dog.shape[<span class="number">1</span>]*self.dog.shape[<span class="number">2</span>]</span><br><span class="line">        self.Tdex=self.dog.shape[<span class="number">2</span>]</span><br><span class="line">        self.Xdex=<span class="number">1</span></span><br><span class="line">        self.Nmax=self.dog.shape[<span class="number">0</span>]</span><br><span class="line">        self.Tmax=self.dog.shape[<span class="number">1</span>]</span><br><span class="line">        self.Xmax=self.dog.shape[<span class="number">2</span>]</span><br><span class="line">        self.ldoglib=npct.load_library(<span class="string">'d'</span>,<span class="string">'.'</span>)</span><br><span class="line">        array_1d_double = npct.ndpointer(dtype=np.float64, ndim=<span class="number">3</span>, flags=<span class="string">'CONTIGUOUS'</span>)</span><br><span class="line">        self.ldoglib.cal.argtypes=[array_1d_double,c_int,c_int,c_int,c_int,c_int,c_int,c_double,c_double,c_double]</span><br><span class="line">        self.ldoglib.cal.restype=c_int</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cal</span><span class="params">(self)</span>:</span></span><br><span class="line">        self. ldoglib.cal(self.dog,self.Ndex,self.Tdex,self.Xdex,self.Nmax,self.Tmax,self.Xmax,self.msq,self.lam,self.ls)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tu</span><span class="params">(self)</span>:</span></span><br><span class="line">        av=np.zeros(self.dog.shape[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> lu <span class="keyword">in</span> range(<span class="number">0</span>,self.dog.shape[<span class="number">0</span>]):</span><br><span class="line">            av[lu]=np.mean(self.dog[lu,:,:]**<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        plt.figure()</span><br><span class="line">        plt.plot(av)</span><br><span class="line">        tit=<span class="string">'$\phi^&#123;2&#125;$平均值变化图'</span>+<span class="string">' a='</span>+str(self.a)+<span class="string">'$\lambda = $ '</span>+str(self.lam)+<span class="string">' m='</span>+str(self.mass)</span><br><span class="line">        plt.title(tit)</span><br><span class="line">        plt.xlabel(<span class="string">'组态数'</span>)</span><br><span class="line">        plt.savefig(<span class="string">'phi'</span>+str((time.time()))+<span class="string">'.png'</span>)</span><br><span class="line">        plt.show()</span><br><span class="line"><span class="comment">#     def jt(self,NUM=70,Lang=25,St=1000,jian=50,zhi=21):</span></span><br><span class="line"><span class="comment">#         fu=np.zeros([NUM,Lang])</span></span><br><span class="line"><span class="comment">#         llk=np.zeros(NUM)</span></span><br><span class="line"><span class="comment">#         for kl in range(0,NUM):</span></span><br><span class="line"><span class="comment">#             for ti in range(0,Lang):</span></span><br><span class="line"><span class="comment">#                 fu[kl,ti]=np.mean((self.dog[St+jian*kl,0,:])*(self.dog[St+jian*kl,ti,:]))</span></span><br><span class="line"><span class="comment">#                 pass</span></span><br><span class="line"><span class="comment">#             pass</span></span><br><span class="line">       </span><br><span class="line">        </span><br><span class="line"><span class="comment">#         llu=fu.mean(axis=0)</span></span><br><span class="line"><span class="comment">#         llue=fu.var(axis=0)</span></span><br><span class="line"><span class="comment"># #         print('误差：'+str(llue))</span></span><br><span class="line"><span class="comment">#         lluu=(np.log(np.abs(llu)))[:zhi]</span></span><br><span class="line"><span class="comment">#         x=np.linspace(0,(zhi-1)/10,zhi)</span></span><br><span class="line"><span class="comment">#         ooo=np.polyfit(x,lluu,1)</span></span><br><span class="line"><span class="comment">#         yyy=ooo[0]*x+ooo[1]</span></span><br><span class="line"><span class="comment">#         print(ooo[0])</span></span><br><span class="line"><span class="comment">#         self.eng=ooo[0]</span></span><br><span class="line"><span class="comment">#         plt.figure()</span></span><br><span class="line"><span class="comment">#         plt.plot(x,lluu,'rx')</span></span><br><span class="line"><span class="comment">#         plt.plot(x,yyy,'-')</span></span><br><span class="line"><span class="comment"># #         for nnn in range(0,NUM):</span></span><br><span class="line"><span class="comment"># #             ddog=(np.log(np.abs(llu)))[nnn,:zhi]</span></span><br><span class="line"><span class="comment"># #             llk[nnn]=np.polyfit(x,ddog,1)</span></span><br><span class="line"><span class="comment"># #             pass</span></span><br><span class="line"><span class="comment"># #         self.res=llk</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ek</span><span class="params">(self,St=<span class="number">3000</span>,jiange=<span class="number">98</span>,dianshu=<span class="number">30</span>,shijian=<span class="number">10</span>,qv=<span class="number">6</span>)</span>:</span></span><br><span class="line">        lp=np.zeros([dianshu,self.nx])</span><br><span class="line"><span class="comment">#         tfrt=np.zeros([50,10,50])</span></span><br><span class="line">        <span class="keyword">for</span> up <span class="keyword">in</span> range(dianshu):</span><br><span class="line"></span><br><span class="line">            hu=self.dog[St+jiange*up,:,:]</span><br><span class="line"></span><br><span class="line">            ss=np.zeros_like(hu,dtype=<span class="string">'complex'</span>)</span><br><span class="line">            <span class="keyword">for</span> ii <span class="keyword">in</span> range(self.nt):</span><br><span class="line">                ss[ii,:]=np.fft.fft(hu[ii,:])</span><br><span class="line">            frt=np.zeros([shijian,self.nx],dtype=<span class="string">'complex'</span>)</span><br><span class="line">            <span class="keyword">for</span> aa <span class="keyword">in</span> range(shijian):</span><br><span class="line">                er=np.zeros(self.nx)</span><br><span class="line">                <span class="keyword">for</span> bb <span class="keyword">in</span> range(self.nt):</span><br><span class="line">                    er=er+(ss[bb,:].conjugate()*ss[(bb+aa)%self.nt,:])</span><br><span class="line">        <span class="comment">#             if aa==9 and up==1:</span></span><br><span class="line">        <span class="comment">#                 print((bb+aa)%100)</span></span><br><span class="line">        <span class="comment">#             pass</span></span><br><span class="line">                frt[aa,:]=er</span><br><span class="line">            <span class="keyword">for</span> down <span class="keyword">in</span> range(self.nx):</span><br><span class="line">                sls=frt[:,down]</span><br><span class="line">                wew=np.log(sls)</span><br><span class="line">        <span class="comment">#         wew.shape</span></span><br><span class="line">                xcx=np.linspace(<span class="number">0</span>,<span class="number">1</span>-self.a,shijian)</span><br><span class="line">                xcx.shape</span><br><span class="line">                llll=np.polyfit(xcx[:qv],wew[:qv],<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="comment">#print()</span></span><br><span class="line">                lp[up,down]=(float(llll))</span><br><span class="line">        mme=np.zeros(self.nx)</span><br><span class="line">        meer=np.zeros(self.nx)</span><br><span class="line">        xday=np.zeros(self.nx)</span><br><span class="line">        <span class="keyword">for</span> kku <span class="keyword">in</span> range(self.nx):</span><br><span class="line">            mme[kku]=-lp[:,kku].mean()</span><br><span class="line">            meer[kku]=lp[:,kku].var()</span><br><span class="line">            xday[kku]=kku</span><br><span class="line">        plt.figure()</span><br><span class="line">        plt.errorbar(xday[:int(self.nx/<span class="number">2</span>)],mme[:int(self.nx/<span class="number">2</span>)],yerr=meer[:int(self.nx/<span class="number">2</span>)],fmt=<span class="string">'rx:'</span>,ecolor=<span class="string">'b'</span>,capthick=<span class="number">2</span>,capsize=<span class="number">4</span>)</span><br><span class="line">        tit=<span class="string">'色散关系图 a='</span>+str(self.a)+<span class="string">'$\lambda = $ '</span>+str(self.lam)+<span class="string">' m='</span>+str(self.mass)</span><br><span class="line">        plt.title(tit)</span><br><span class="line">        plt.xlabel(<span class="string">"k"</span>)</span><br><span class="line">        plt.ylabel(<span class="string">'m'</span>)</span><br><span class="line"><span class="comment">#         plt.savefig()</span></span><br><span class="line">        plt.savefig(<span class="string">'san'</span>+str((time.time()))+<span class="string">'.png'</span>)</span><br><span class="line">        plt.show()</span><br><span class="line">        <span class="keyword">return</span> [mme,meer]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dd=zutai()<span class="comment">#初始化</span></span><br><span class="line">dd.cal()<span class="comment">#进行计算</span></span><br><span class="line">dd.tu()<span class="comment">#画出平均数据</span></span><br><span class="line">[a,b]=dd.ek()<span class="comment">#生成色散关系</span></span><br></pre></td></tr></table></figure><p><img src="output_7_0.png" alt="png"></p><pre><code>/home/yu/.local/lib/python3.6/site-packages/ipykernel_launcher.py:94: ComplexWarning: Casting complex values to real discards the imaginary part</code></pre><p><img src="output_7_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d2=zutai(m=<span class="number">2</span>)<span class="comment">#初始化</span></span><br><span class="line">d2.cal()<span class="comment">#进行计算</span></span><br><span class="line">d2.tu()<span class="comment">#画出平均数据</span></span><br><span class="line">[a,b]=d2.ek()<span class="comment">#生成色散关系</span></span><br></pre></td></tr></table></figure><p><img src="output_8_0.png" alt="png"></p><pre><code>/home/yu/.local/lib/python3.6/site-packages/ipykernel_launcher.py:94: ComplexWarning: Casting complex values to real discards the imaginary part</code></pre><p><img src="output_8_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[a,b]=d2.ek(jiange=<span class="number">74</span>,St=<span class="number">3040</span>)<span class="comment">#数据不够理想，可以更改采样点</span></span><br><span class="line"><span class="comment">#算了不调了，就这样了</span></span><br></pre></td></tr></table></figure><pre><code>/home/yu/.local/lib/python3.6/site-packages/ipykernel_launcher.py:94: ComplexWarning: Casting complex values to real discards the imaginary part</code></pre><p><img src="output_9_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d2=zutai(m=<span class="number">3</span>)<span class="comment">#初始化</span></span><br><span class="line">d2.cal()<span class="comment">#进行计算</span></span><br><span class="line">d2.tu()<span class="comment">#画出平均数据</span></span><br><span class="line">[a,b]=d2.ek()<span class="comment">#生成色散关系</span></span><br></pre></td></tr></table></figure><p><img src="output_10_0.png" alt="png"></p><pre><code>/home/yu/.local/lib/python3.6/site-packages/ipykernel_launcher.py:94: ComplexWarning: Casting complex values to real discards the imaginary part</code></pre><p><img src="output_10_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a,b]=d2.ek(jiange=<span class="number">27</span>)<span class="comment">#生成色散关系</span></span><br></pre></td></tr></table></figure><pre><code>/home/yu/.local/lib/python3.6/site-packages/ipykernel_launcher.py:94: ComplexWarning: Casting complex values to real discards the imaginary part</code></pre><p><img src="output_11_1.png" alt="png"></p><p>m越大越离谱，减小m试试看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d2=zutai(m=<span class="number">0.5</span>)<span class="comment">#初始化</span></span><br><span class="line">d2.cal()<span class="comment">#进行计算</span></span><br><span class="line">d2.tu()<span class="comment">#画出平均数据</span></span><br><span class="line">[a,b]=d2.ek()<span class="comment">#生成色散关系</span></span><br></pre></td></tr></table></figure><p><img src="output_13_0.png" alt="png"></p><pre><code>/home/yu/.local/lib/python3.6/site-packages/ipykernel_launcher.py:94: ComplexWarning: Casting complex values to real discards the imaginary part</code></pre><p><img src="output_13_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d2=zutai(m=<span class="number">0.25</span>)<span class="comment">#初始化</span></span><br><span class="line">d2.cal()<span class="comment">#进行计算</span></span><br><span class="line">d2.tu()<span class="comment">#画出平均数据</span></span><br><span class="line">[a,b]=d2.ek()<span class="comment">#生成色散关系</span></span><br></pre></td></tr></table></figure><p><img src="output_14_0.png" alt="png"></p><pre><code>/home/yu/.local/lib/python3.6/site-packages/ipykernel_launcher.py:94: ComplexWarning: Casting complex values to real discards the imaginary part</code></pre><p><img src="output_14_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d2=zutai(la=<span class="number">0.5</span>)<span class="comment">#初始化</span></span><br><span class="line">d2.cal()<span class="comment">#进行计算</span></span><br><span class="line">d2.tu()<span class="comment">#画出平均数据</span></span><br><span class="line">[a,b]=d2.ek()<span class="comment">#生成色散关系</span></span><br></pre></td></tr></table></figure><p><img src="output_15_0.png" alt="png"></p><pre><code>/home/yu/.local/lib/python3.6/site-packages/ipykernel_launcher.py:94: ComplexWarning: Casting complex values to real discards the imaginary part</code></pre><p><img src="output_15_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d2=zutai(la=<span class="number">10</span>)<span class="comment">#初始化</span></span><br><span class="line">d2.cal()<span class="comment">#进行计算</span></span><br><span class="line">d2.tu()<span class="comment">#画出平均数据</span></span><br><span class="line">[a,b]=d2.ek()<span class="comment">#生成色散关系</span></span><br></pre></td></tr></table></figure><p><img src="output_16_0.png" alt="png"></p><pre><code>/home/yu/.local/lib/python3.6/site-packages/ipykernel_launcher.py:94: ComplexWarning: Casting complex values to real discards the imaginary part</code></pre><p><img src="output_16_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d2=zutai(la=<span class="number">0.5</span>)<span class="comment">#初始化</span></span><br><span class="line">d2.cal()<span class="comment">#进行计算</span></span><br><span class="line">d2.tu()<span class="comment">#画出平均数据</span></span><br><span class="line">[a,b]=d2.ek()<span class="comment">#生成色散关系</span></span><br></pre></td></tr></table></figure><p><img src="output_17_0.png" alt="png"></p><pre><code>/home/yu/.local/lib/python3.6/site-packages/ipykernel_launcher.py:94: ComplexWarning: Casting complex values to real discards the imaginary part</code></pre><p><img src="output_17_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d2=zutai(la=<span class="number">1</span>,a=<span class="number">0.1</span>)<span class="comment">#初始化</span></span><br><span class="line">d2.cal()<span class="comment">#进行计算</span></span><br><span class="line">d2.tu()<span class="comment">#画出平均数据</span></span><br><span class="line">[a,b]=d2.ek()<span class="comment">#生成色散关系</span></span><br></pre></td></tr></table></figure><p><img src="output_18_0.png" alt="png"></p><pre><code>/home/yu/.local/lib/python3.6/site-packages/ipykernel_launcher.py:94: ComplexWarning: Casting complex values to real discards the imaginary part</code></pre><p><img src="output_18_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d2=zutai(la=<span class="number">1</span>,a=<span class="number">0.05</span>)<span class="comment">#初始化</span></span><br><span class="line">d2.cal()<span class="comment">#进行计算</span></span><br><span class="line">d2.tu()<span class="comment">#画出平均数据</span></span><br><span class="line">[a,b]=d2.ek()<span class="comment">#生成色散关系</span></span><br></pre></td></tr></table></figure><p><img src="output_19_0.png" alt="png"></p><pre><code>/home/yu/.local/lib/python3.6/site-packages/ipykernel_launcher.py:94: ComplexWarning: Casting complex values to real discards the imaginary part</code></pre><p><img src="output_19_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d2=zutai(la=<span class="number">1</span>,a=<span class="number">0.2</span>)<span class="comment">#初始化</span></span><br><span class="line">d2.cal()<span class="comment">#进行计算</span></span><br><span class="line">d2.tu()<span class="comment">#画出平均数据</span></span><br><span class="line">[a,b]=d2.ek()<span class="comment">#生成色散关系</span></span><br></pre></td></tr></table></figure><p><img src="output_20_0.png" alt="png"></p><pre><code>/home/yu/.local/lib/python3.6/site-packages/ipykernel_launcher.py:94: ComplexWarning: Casting complex values to real discards the imaginary part</code></pre><p><img src="output_20_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d2=zutai(la=<span class="number">1</span>,a=<span class="number">0.125</span>)<span class="comment">#初始化</span></span><br><span class="line">d2.cal()<span class="comment">#进行计算</span></span><br><span class="line">d2.tu()<span class="comment">#画出平均数据</span></span><br><span class="line">[a,b]=d2.ek()<span class="comment">#生成色散关系</span></span><br></pre></td></tr></table></figure><p><img src="output_21_0.png" alt="png"></p><pre><code>/home/yu/.local/lib/python3.6/site-packages/ipykernel_launcher.py:94: ComplexWarning: Casting complex values to real discards the imaginary part</code></pre><p><img src="output_21_2.png" alt="png"></p><p>数据点过少，结果看看就行，不要当真。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 基于路径积分-蒙特卡洛方法的简单一维场 --&gt;

&lt;h2 id=&quot;相关理论&quot;&gt;&lt;a href=&quot;#相关理论&quot; class=&quot;headerlink&quot; title=&quot;相关理论&quot;&gt;&lt;/a&gt;相关理论&lt;/h2&gt;&lt;p&gt;一维场即一维空间加上一维时间&lt;/p&gt;
&lt;p&gt;基于拉氏量的路径积分
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于Markov chains 计算一维谐振子基态能量</title>
    <link href="http://blog.dogcraft.com/2019-07-24/qed2/"/>
    <id>http://blog.dogcraft.com/2019-07-24/qed2/</id>
    <published>2019-07-24T07:40:19.000Z</published>
    <updated>2019-07-31T13:07:23.625Z</updated>
    
    <content type="html"><![CDATA[<!-- # 基于Markov chains 计算一维谐振子基态能量 --><p>利用马可夫链计算一维谐振子的基态能量</p><p>计算作用量</p><p>$$ dS=\frac{(u_{n-1}+u_{n})^{2}}{2a\omega}+\frac{a\omega(u_{n-1}^{2}+u_{n}^{2})}{4} +\frac{(u_{n+1}+u_{n})^{2}}{2a\omega}+\frac{a\omega(u_{n+1}^{2}+u_{n}^{2})}{4} $$</p><p>在一系列旧点之上乱序选取，加上某个范围内的随机数，新点与旧点进行局部作用量比较，作用量如减小，则接受新点。如果作用量增大，则按照概率$e^{dS_{2}-dS{1}}$确定是否接受。不接受的点保留旧值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">weight</span><span class="params">(<span class="keyword">double</span> x0, <span class="keyword">double</span> x1, <span class="keyword">double</span> x2, <span class="keyword">double</span> aomega)</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> S=<span class="number">0.0</span>;</span><br><span class="line">S=(x1-x0)*(x1-x0)/(<span class="number">2.0</span>*aomega) + aomega*(x0*x0+x1*x1)/<span class="number">4.0</span> + (x2-x1)*(x2-x1)/(<span class="number">2.0</span>*aomega) + aomega*(x2*x2+x1*x1)/<span class="number">4.0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">exp</span>(<span class="number">-1.0</span>*S);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产生若干（很多）组态之后，对后面的组态求平方平均值即为基态能量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy.ctypeslib <span class="keyword">as</span> npct</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">libcd = npct.load_library(<span class="string">"pf"</span>, <span class="string">"."</span>)</span><br><span class="line">array_1d_double = npct.ndpointer(dtype=np.float64, ndim=<span class="number">2</span>, flags=<span class="string">'CONTIGUOUS'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">libcd.hhh.argtypes=[array_1d_double,c_int,c_int,c_double,c_double]</span><br><span class="line">libcd.hhh.restype=c_int</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lu=np.zeros([<span class="number">130000</span>,<span class="number">500</span>],dtype=<span class="string">'float64'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libcd.hhh(lu,<span class="number">130000</span>,<span class="number">500</span>,<span class="number">0.1</span>,<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><pre><code>16</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">suu=np.zeros(<span class="number">130000</span>)</span><br><span class="line">sii=lu**<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> kk <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">130000</span>):</span><br><span class="line">    suu[kk]=np.mean(sii[kk,:])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(suu[<span class="number">10000</span>::<span class="number">600</span>])<span class="comment">#为防止关联性每600个取数据。</span></span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x7f8d80dda898&gt;]</code></pre><p><img src="output_10_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(suu)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x7f8d405b7710&gt;]</code></pre><p><img src="output_11_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.hist(suu[<span class="number">100000</span>::],<span class="number">40</span>,histtype=<span class="string">'bar'</span>,facecolor=<span class="string">'yellowgreen'</span>,alpha=<span class="number">0.75</span>) <span class="comment">#方均值分布</span></span><br></pre></td></tr></table></figure><pre><code>(array([  59.,  204.,  421.,  739.,  653.,  868., 1014., 1371., 1563.,        1890., 1927., 1802., 1762., 1831., 1505., 1209., 1271., 1342.,        1111., 1041.,  907.,  809.,  658.,  616.,  520.,  426.,  294.,         300.,  394.,  306.,  263.,  203.,  161.,  154.,  107.,   70.,         109.,   86.,   27.,    7.]), array([0.30646848, 0.32209395, 0.33771941, 0.35334488, 0.36897034,        0.3845958 , 0.40022127, 0.41584673, 0.4314722 , 0.44709766,        0.46272313, 0.47834859, 0.49397406, 0.50959952, 0.52522499,        0.54085045, 0.55647592, 0.57210138, 0.58772684, 0.60335231,        0.61897777, 0.63460324, 0.6502287 , 0.66585417, 0.68147963,        0.6971051 , 0.71273056, 0.72835603, 0.74398149, 0.75960695,        0.77523242, 0.79085788, 0.80648335, 0.82210881, 0.83773428,        0.85335974, 0.86898521, 0.88461067, 0.90023614, 0.9158616 ,        0.93148707]), &lt;a list of 40 Patch objects&gt;)</code></pre><p><img src="output_12_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mean(suu[<span class="number">10000</span>::<span class="number">600</span>])</span><br></pre></td></tr></table></figure><pre><code>0.49547505767135985</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hy=lu[<span class="number">10000</span>::<span class="number">600</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loo=np.zeros(<span class="number">500</span>)</span><br><span class="line"><span class="keyword">for</span> po <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">500</span>):</span><br><span class="line">    loo[po]=np.mean(lu[<span class="number">10000</span>,:]*lu[<span class="number">10000</span>+po*<span class="number">1</span>,:])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot((looo[<span class="number">5</span>:<span class="number">50</span>]),<span class="string">'rx'</span>)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x7f8d3f03e208&gt;]</code></pre><p><img src="output_16_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">looo=np.log(loo)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loo</span><br></pre></td></tr></table></figure><pre><code>array([ 0.34280532,  0.13145158,  0.09545402,  0.05821956,  0.11446664,       -0.00101133,  0.01600951,  0.01831628,  0.03161569,  0.03762436,        0.04253305,  0.03503241, -0.01741445,  0.0206876 ,  0.0559742 ,        0.00657246,  0.02660626,  0.04883725,  0.02803961,  0.04471572,       -0.03246027,  0.02030995,  0.04995083,  0.08313026,  0.03374789,        0.02868077, -0.04105371, -0.01369022, -0.02838291, -0.01871887,        0.02223757,  0.04172896,  0.01848376,  0.06792485,  0.00939457,       -0.0263474 , -0.00551463,  0.06894225, -0.01276136, -0.0205876 ])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.var(suu[<span class="number">10000</span>::<span class="number">600</span>]) <span class="comment">#f方差</span></span><br></pre></td></tr></table></figure><pre><code>0.010724637054091532</code></pre><p>相关C++ 模块代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hhh</span><span class="params">(<span class="keyword">double</span> * x,<span class="keyword">int</span> hang,<span class="keyword">int</span> lie, <span class="keyword">double</span> aw, <span class="keyword">double</span> dx )</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">weight</span><span class="params">(<span class="keyword">double</span> x0, <span class="keyword">double</span> x1, <span class="keyword">double</span> x2, <span class="keyword">double</span> aomega)</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> S=<span class="number">0.0</span>;</span><br><span class="line">S=(x1-x0)*(x1-x0)/(<span class="number">2.0</span>*aomega) + aomega*(x0*x0+x1*x1)/<span class="number">4.0</span> + (x2-x1)*(x2-x1)/(<span class="number">2.0</span>*aomega) + aomega*(x2*x2+x1*x1)/<span class="number">4.0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">exp</span>(<span class="number">-1.0</span>*S);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hhh</span><span class="params">(<span class="keyword">double</span> * x,<span class="keyword">int</span> hang,<span class="keyword">int</span> lie, <span class="keyword">double</span> aw, <span class="keyword">double</span> dx )</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> Nt,Nconf; </span><br><span class="line"><span class="keyword">double</span> aomega; <span class="comment">// a(lattice spacing)*omega(angular frequency)</span></span><br><span class="line"><span class="keyword">double</span> delta;  <span class="comment">//update step size</span></span><br><span class="line"><span class="comment">// char output_path[200]; // output file path</span></span><br><span class="line">    aomega=aw;</span><br><span class="line">    Nt=lie;</span><br><span class="line">    Nconf=hang;</span><br><span class="line">    aomega=aw;</span><br><span class="line">    delta=dx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// read in input</span></span><br><span class="line"><span class="comment">// read_double("aomega", &amp;aomega);</span></span><br><span class="line"><span class="comment">// read_int("Nt", &amp;Nt);</span></span><br><span class="line"><span class="comment">// read_int("Nconf", &amp;Nconf);</span></span><br><span class="line"><span class="comment">// read_double("delta", &amp;delta);</span></span><br><span class="line"><span class="comment">// read_string("output_path", output_path);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span>* x1 = <span class="keyword">new</span> <span class="keyword">double</span>[Nt];</span><br><span class="line"><span class="keyword">double</span>* x2 = <span class="keyword">new</span> <span class="keyword">double</span>[Nt];</span><br><span class="line"><span class="comment">// double* x = new double[Nt*Nconf];</span></span><br><span class="line"><span class="built_in">std</span>::ofstream out;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">std</span>::default_random_engine seed;</span><br><span class="line">       seed.seed(time(<span class="literal">NULL</span>));</span><br><span class="line">        <span class="comment">// seed.seed(1234);</span></span><br><span class="line">    <span class="comment">//    std::uniform_real_distribution&lt;double&gt; ran1(-0.1,0.1);</span></span><br><span class="line">        <span class="built_in">std</span>::uniform_real_distribution&lt;<span class="keyword">double</span>&gt; ran2(<span class="number">-1.0</span>,<span class="number">1.0</span>);</span><br><span class="line">        <span class="built_in">std</span>::uniform_real_distribution&lt;<span class="keyword">double</span>&gt; ran3(<span class="number">0</span>,<span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize the configuration to be a random number between [-0.1, 0.1]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Nt; i++)</span><br><span class="line"><span class="comment">// *(x1+i) = *(x2+i) = ran1(seed);</span></span><br><span class="line">*(x1+i) = *(x2+i) = <span class="number">0.0</span>;  <span class="comment">// cold start</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// update the configuration with metropolis algorithm</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; t_iter;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Nt; i++) t_iter.push_back(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;Nconf; n++)&#123; </span><br><span class="line"><span class="built_in">std</span>::random_shuffle (t_iter.begin(), t_iter.end());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>; t&lt;Nt; t++)&#123;</span><br><span class="line"><span class="keyword">int</span> i=t_iter[t];</span><br><span class="line">*(x2+i) = *(x1+i) + delta*ran2(seed);</span><br><span class="line"><span class="keyword">if</span>(ran3(seed) &lt; weight(*(x2+(i<span class="number">-1</span>+Nt)%Nt),*(x2+i),*(x2+(i+<span class="number">1</span>)%Nt),aomega)/weight(*(x1+(i<span class="number">-1</span>+Nt)%Nt),*(x1+i),*(x1+(i+<span class="number">1</span>)%Nt), aomega))</span><br><span class="line">*(x1+i)=*(x2+i);  <span class="comment">// accept</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">*(x2+i)=*(x1+i);  <span class="comment">// reject</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Nt; i++)</span><br><span class="line">*(x + n*Nt + i) = *(x2 + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">g++ fp.cpp -shared -fPIC -o fp.so</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- # 基于Markov chains 计算一维谐振子基态能量 --&gt;

&lt;p&gt;利用马可夫链计算一维谐振子的基态能量&lt;/p&gt;
&lt;p&gt;计算作用量&lt;/p&gt;
&lt;p&gt;$$ dS=\frac{(u_{n-1}+u_{n})^{2}}{2a\omega}+\frac{a\omega(u
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>树莓派create_ap做wifi热点添加ipv6支持</title>
    <link href="http://blog.dogcraft.com/2019-07-22/create_ap-add-ipv6/"/>
    <id>http://blog.dogcraft.com/2019-07-22/create_ap-add-ipv6/</id>
    <published>2019-07-22T06:54:28.000Z</published>
    <updated>2019-07-22T06:13:55.292Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派create_ap做wifi热点通常情况下仅有ipv4功能，没有ipv6功能。<br>其他添加ipv6的方案可以分为两种，一种是ndp，利用ipv6标准的邻居发现协议使所有接入子网的设备获得ipv6地址。另一种是nat66方案，与通行的ipv4 nat相同。</p><h2 id="ndp"><a href="#ndp" class="headerlink" title="ndp"></a>ndp</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;树莓派create_ap做wifi热点通常情况下仅有ipv4功能，没有ipv6功能。&lt;br&gt;其他添加ipv6的方案可以分为两种，一种是ndp，利用ipv6标准的邻居发现协议使所有接入子网的设备获得ipv6地址。另一种是nat66方案，与通行的ipv4 nat相同。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>树莓派系统服务注册</title>
    <link href="http://blog.dogcraft.com/2019-07-10/raspbian-ser-add/"/>
    <id>http://blog.dogcraft.com/2019-07-10/raspbian-ser-add/</id>
    <published>2019-07-10T09:54:28.000Z</published>
    <updated>2019-07-26T07:34:50.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树莓派系统服务注册"><a href="#树莓派系统服务注册" class="headerlink" title="树莓派系统服务注册"></a>树莓派系统服务注册</h1><p>今天给树莓派安装<a href="https://ariang.mayswind.net/zh_Hans/" target="_blank" rel="noopener">AriaNG</a>时将aria2启动脚本添加<code>/etc/init.d/</code>后报错，系统未发现该服务。后经多方查找，发现只在<code>/etc/init.d/</code>添加启动脚本还不够，需要再次运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ sudo update-rc.d aria2c defaults</span><br></pre></td></tr></table></figure><p>其中 <code>aria2c</code>是启动脚本的名字。</p><p>附<code>aria2c</code>内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## BEGIN INIT INFO</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Provides: aria2c</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Required-Start:    <span class="variable">$network</span> <span class="variable">$local_fs</span> <span class="variable">$remote_fs</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Required-Stop:     <span class="variable">$network</span> <span class="variable">$local_fs</span> <span class="variable">$remote_fs</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default-Stop:      0 1 6</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Short-Description: aria2c RPC init script.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description: Starts and stops aria2 RPC services.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## END INIT INFO</span></span></span><br><span class="line"></span><br><span class="line">USER=root</span><br><span class="line">RETVAL=0</span><br><span class="line"></span><br><span class="line">case "$1" in  </span><br><span class="line">    start)  </span><br><span class="line">        echo "Starting service Aria2..."</span><br><span class="line">        aria2c --conf-path=/path/to/config/aria2.conf -D  </span><br><span class="line">        echo "Start service done."  </span><br><span class="line">    ;;  </span><br><span class="line">    stop)  </span><br><span class="line">        echo "Stoping service Aria2..."  </span><br><span class="line">        killall aria2c   </span><br><span class="line">        echo "Stop service done."  </span><br><span class="line">    ;;  </span><br><span class="line">esac  </span><br><span class="line"></span><br><span class="line">exit $RETVAL</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;树莓派系统服务注册&quot;&gt;&lt;a href=&quot;#树莓派系统服务注册&quot; class=&quot;headerlink&quot; title=&quot;树莓派系统服务注册&quot;&gt;&lt;/a&gt;树莓派系统服务注册&lt;/h1&gt;&lt;p&gt;今天给树莓派安装&lt;a href=&quot;https://ariang.mayswind.n
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.dogcraft.com/2019-07-10/hello-world/"/>
    <id>http://blog.dogcraft.com/2019-07-10/hello-world/</id>
    <published>2019-07-10T01:21:40.322Z</published>
    <updated>2019-07-10T01:21:40.322Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
